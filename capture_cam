from flask import Flask, Response
from flask_cors import CORS
import cv2
import paho.mqtt.client as mqtt
import time
import os

app = Flask(__name__)
CORS(app)

camera = cv2.VideoCapture(0)  # use 0 for web camera

# MQTT 설정
broker = '172.20.48.180'  # 브로커 주소
port = 1883  # 브로커 포트 (기본 1883)
topic = 'robot/location'  # 수신할 토픽

# 화면 캡처를 위한 플래그
capture_forward_150 = False
capture_forward_400 = False
capture_reverse_150 = False
capture_reverse_400 = False

def on_message(client, userdata, msg):
    global capture_forward_150, capture_forward_400, capture_reverse_150, capture_reverse_400
    if msg.topic == topic and msg.payload.decode() == "stop_forward_150":
        print("Stop command received, capturing frame...")
        capture_forward_150 = True
    elif msg.topic == topic and msg.payload.decode() == "stop_forward_400":
        print("Stop command received, capturing frame...")
        capture_forward_400 = True
    elif msg.topic == topic and msg.payload.decode() == "stop_reverse_150":
        print("Stop command received, capturing frame...")
        capture_reverse_150 = True
    elif msg.topic == topic and msg.payload.decode() == "stop_reverse_400":
        print("Stop command received, capturing frame...")
        capture_reverse_400 = True

# MQTT 클라이언트 생성 및 콜백 함수 설정
mqtt_client = mqtt.Client()
mqtt_client.on_message = on_message

# 브로커에 연결 및 구독
mqtt_client.connect(broker, port)
mqtt_client.subscribe(topic)
mqtt_client.loop_start()

def gen_frames():
    global capture_forward_150, capture_forward_400,capture_reverse_150,capture_reverse_400

    if not os.path.exists('/home/kkymin/Test_Cam/captures'):
                    os.makedirs('/home/kkymin/Test_Cam/captures')
    while True:
        for _ in range(1):
            camera.grab()
        success, frame = camera.retrieve()  # 카메라 프레임 읽기
        if not success:
            break
        else:
            if capture_forward_150:  # 'stop' 명령을 받으면 프레임을 캡처
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                filename = f"/home/kkymin/Test_Cam/captures/150_forward_{timestamp}.jpg"
                cv2.imwrite(filename, frame)  # 프레임을 파일로 저장
                print(f"Frame captured and saved as {filename}")
                capture_forward_150 = False  # 플래그 초기화

            if capture_forward_400:  # 'stop' 명령을 받으면 프레임을 캡처
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                filename = f"/home/kkymin/Test_Cam/captures/400_forward_{timestamp}.jpg"
                cv2.imwrite(filename, frame)  # 프레임을 파일로 저장
                print(f"Frame captured and saved as {filename}")
                capture_forward_400 = False  # 플래그 초기화

            if capture_reverse_150:  # 'stop' 명령을 받으면 프레임을 캡처
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                filename = f"/home/kkymin/Test_Cam/captures/150_reverse_{timestamp}.jpg"
                cv2.imwrite(filename, frame)  # 프레임을 파일로 저장
                print(f"Frame captured and saved as {filename}")
                capture_reverse_150 = False  # 플래그 초기화

            if capture_reverse_400:  # 'stop' 명령을 받으면 프레임을 캡처
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                filename = f"/home/kkymin/Test_Cam/captures/400_reverse_{timestamp}.jpg"
                
                cv2.imwrite(filename, frame)  # 프레임을 파일로 저장
                print(f"Frame captured and saved as {filename}")
                capture_reverse_400 = False  # 플래그 초기화

            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    return Response(gen_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
